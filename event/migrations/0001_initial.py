# Generated by Django 5.1.2 on 2024-12-17 04:51

import ckeditor.fields
import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('club', '0006_alter_clubdata_user'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opportunity_type', models.CharField(choices=[('General and case competition', 'General and case competition'), ('Quizzes', 'Quizzes'), ('Hackathon and coding challenge', 'Hackathon and coding challenge'), ('Scolarships', 'Scolarships'), ('Workshop and webinars', 'Workshop and webinars'), ('Conferences', 'Conferences'), ('Creative and cultural events', 'Creative and cultural events')], max_length=35)),
                ('opportunity_sub_type', models.CharField(blank=True, choices=[], max_length=30, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='question_images/')),
                ('visibility', models.CharField(choices=[('public', 'Open publicly on Nexify'), ('invite', 'Invite Only')], default='public', max_length=10)),
                ('opportunity_title', models.CharField(blank=True, max_length=190, null=True)),
                ('website_url', models.URLField(blank=True, help_text="The URL can be your organization's website or an opportunity-related URL.", null=True)),
                ('festival_name', models.CharField(blank=True, help_text='Name of the festival or campaign (if applicable).', max_length=100, null=True)),
                ('mode_of_event', models.CharField(blank=True, choices=[('online', 'Online Mode'), ('offline', 'Offline Mode')], max_length=10, null=True)),
                ('skills_to_be_assessed', models.TextField(blank=True, help_text='List required skills for participants.', null=True)),
                ('about_opportunity', ckeditor.fields.RichTextField(blank=True, help_text='Mention all the guidelines like eligibility, format, etc.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='Select at least one category.', to='event.category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_by', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='club.clubdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Registration_details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.CharField(choices=[('Public', 'Public'), ('Clubs', 'Clubs'), ('Invited', 'Invited')], default='individual', max_length=20)),
                ('compulsary', models.BooleanField(default=False)),
                ('platform', models.BooleanField()),
                ('participation_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group')], default='individual', max_length=20)),
                ('minimum_members', models.IntegerField(default=1)),
                ('maximum_members', models.IntegerField(default=1)),
                ('registration_start', models.DateTimeField(default=datetime.datetime(2024, 12, 17, 10, 21, 55, 733649))),
                ('registration_end', models.DateTimeField()),
                ('number_of_registration', models.IntegerField(blank=True, null=True)),
                ('accepted_users', models.ManyToManyField(blank=True, related_name='accepted_events', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registration_details', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registration_details', to='event.event')),
                ('invited_club', models.ManyToManyField(blank=True, related_name='events', to='club.clubdetails')),
                ('invited_users', models.ManyToManyField(blank=True, related_name='invited_events', to=settings.AUTH_USER_MODEL)),
                ('rejected_users', models.ManyToManyField(blank=True, related_name='rejected_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('success', 'Success')], default='info', max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('status', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sent_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_notifications', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_notifications', to='event.registration_details')),
            ],
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Event Date')),
                ('event', models.CharField(max_length=100, verbose_name='Event Description')),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='timelines', to='event.event')),
            ],
            options={
                'verbose_name': 'Timeline Event',
                'verbose_name_plural': 'Timeline Events',
                'ordering': ['-date'],
            },
        ),
    ]
